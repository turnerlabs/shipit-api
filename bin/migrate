#!/usr/bin/env node

const path = require('path'),
    child_process = require('child_process'),
    Promise = require('bluebird'),
    Sequelize = require('sequelize'),
    Umzug = require('umzug');

if (!process.env.DATABASE_URL) {
    console.error('Error: DATABASE_URL is required');
    process.exit(1);
}

const sequelize = new Sequelize(process.env.DATABASE_URL);

const umzug = new Umzug({
    storage: 'sequelize',
    storageOptions: {
        sequelize: sequelize
    },
    migrations: {
        params: [
            sequelize.getQueryInterface(),
            sequelize.constructor,
        ],
        path: './migrations',
        pattern: /\.js$/
    },
    logging: () => {
        console.log.apply(null, arguments);
    }
});

function logUmzugEvent(eventName) {
    return (name, migration) => console.log(`${name} ${eventName}`);
}

umzug.on('migrating', logUmzugEvent('migrating'));
umzug.on('migrated',  logUmzugEvent('migrated'));
umzug.on('reverting', logUmzugEvent('reverting'));
umzug.on('reverted',  logUmzugEvent('reverted'));

function cmdStatus() {
    let result = {};

    return umzug.executed()
        .then(executed => {
            result.executed = executed;
            return umzug.pending();
        })
        .then(pending => {
            result.pending = pending;
            return result;
        })
        .then(({ executed, pending }) => {
            executed = executed.map(migration => {
                migration.name = path.basename(migration.file, '.js');
                return migration;
            });

            pending = pending.map(migration => {
                migration.name = path.basename(migration.file, '.js');
                return migration;
            });

            const current = executed.length > 0 ? executed[0].file : '<NO_MIGRATION>';
            const status = {
                current: current,
                executed: executed.map(migration => migration.file),
                pending: pending.map(migration => migration.file)
            };

            console.log(JSON.stringify(status, null, 2));

            return { executed, pending };
        });
}

function cmdMigrate() {
    return umzug.up();
}

function cmdMigrateNext() {
    return cmdStatus()
        .then(({ executed, pending }) => {
            if (pending.length === 0) {
                return Promise.reject(new Error('No pending migrations'));
            }
            const next = pending[0].name;
            return umzug.up({ to: next });
        });
}

function cmdReset() {
    return umzug.down({ to: 0 });
}

function cmdResetPrev() {
    return cmdStatus()
        .then(({ executed, pending }) => {
            if (executed.length === 0) {
                return Promise.reject(new Error('Already at initial state'));
            }
            const prev = executed[executed.length - 1].name;
            return umzug.down({ to: prev });
        });
}

const cmd = (process.argv[2] || 'status').trim()
let executedCmd;

console.log(`${cmd.toUpperCase()} BEGIN`);
switch(cmd) {
case 'status':
    executedCmd = cmdStatus();
    break;

case 'up':
    executedCmd = cmdMigrate();
    break;

case 'next':
    executedCmd = cmdMigrateNext();
    break;

case 'down':
    executedCmd = cmdReset();
    break;

case 'prev':
    executedCmd = cmdResetPrev();
    break;

default:
    console.log(`invalid cmd ${cmd}`);
    process.exit(1);
}

executedCmd
    .then(result => {
        const str = `${cmd.toUpperCase()} DONE`;
        console.log(str);
        console.log('='.repeat(str.length));
    })
    .catch(err => {
        const str = `${cmd.toUpperCase()} ERROR`
        console.log(str);
        console.log('='.repeat(str.length));
        console.log(err);
        console.log('='.repeat(str.length));
    })
    .then(() => {
        if (cmd !== 'status') {
            return cmdStatus();
        }
        return Promise.resolve();
    })
    .then(() => process.exit(0));
